@page "/"
@using AncientMountain.Managed.Data
@using AncientMountain.Pages.Widgets
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using AncientMountain.Managed
@using AncientMountain.Managed.Services
@using System.Globalization
@using System.Text.Json;
@inject SignalRService SignalRService
@inject RadarService RadarService
@inject NavigationManager Navigation
@inject LootFilterService LootFilter
@inject IJSRuntime JS

<PageTitle>@windowTitle</PageTitle>
@if (showAlert)
{
    <div class="alert">
        <span class="alert-closebtn" @onclick="CloseAlert">&times;</span>
        @alertMessage
    </div>
}
<div class="canvas-container"
     @onwheel="OnMouseWheel"
     @onmousedown="OnMouseDown"
     @onmousemove="OnMouseMove"
     @onmouseup="OnMouseUp">
    <div class="connection-controls">
        <label title="IP Address/Hostname of Web Radar Server (WAN IP).">Server IP/Host: </label>
        <input type="text" @bind="host" class="host-input" maxlength="128" spellcheck="false" />
        <label title="Port to connect to on the Web Radar Server.">Port: </label>
        <input type="text" @bind="port" class="port-input" maxlength="5" spellcheck="false" />
        <label title="Password to authenticate with the Web Radar Server.">Password: </label>
        <input type="text" @bind="password" class="password-input" maxlength="12" spellcheck="false" />
        <button title="Connect to the remote Web Radar Server." class="rounded-button" @onclick="Connect" disabled="@isConnecting">Connect</button>
        @if (RadarService.playerNames != null)
        {
            <label title="Your in-game name. This will make the radar focus on you.">Your Name: </label>
            <select class="name-input" @onchange="playerSelected">
                <option selected value="localPlayer">select one</option>
                @foreach (var item in RadarService.playerNames)
                {
                    <option value="@item">@item</option>
                }
            </select>
        }

        <label title="Scale Factor to make elements smaller/larger on the Radar Map.">Scale: </label>
        <input type="range" step="0.01" min="0.50" max="2.00" @bind="RadarService.Scale" @bind:culture="CultureInfo.InvariantCulture" />
        <label title="Zoom Factor to zoom in/out on the Radar Map.">Zoom: </label>
        <input type="range" step="0.01" min="0.01" max="2.00" @bind="RadarService.Zoom" @bind:culture="CultureInfo.InvariantCulture" />
        <span class="checkbox-group">
            <input type="checkbox" @bind="PlayerWidget" />
            <label title="Enable Player Widgets for additional information.">Player Widget</label>
        </span>

        <span class="checkbox-group">
            <input type="checkbox" @bind="LootWidget" />
            <label title="Enable Loot Widget for additional information.">Loot Widget</label>
        </span>

        <span class="checkbox-group">
            <input type="checkbox" @bind="MiscWidget" />
            <label title="Enable Misc Widget for additional information.">Misc Widget</label>
        </span>
        <a class="rounded-button" href="@($"{Navigation.BaseUri}ESP?host={host}&port={port}&password={password}")" target="_blank" rel="noopener noreferrer">Open ESP</a>
    </div>
    <div class="canvas-wrapper">
        <SkiaSharp.Views.Blazor.SKCanvasView OnPaintSurface="OnPaintSurface" class="skia-canvas" EnableRenderLoop="true" />
    </div>
</div>
<p>LootWidget State: @(LootWidget ? "Enabled" : "Disabled")</p>

    @if (LootWidget)
    {
        <LootInfoWidget LootWidget="LootWidget"
                        LootData="SignalRService.Data?.Loot" />

    }
    @if (MiscWidget)
    {
        <MiscInfoWidget MiscWidget="MiscWidget" />
    }
    @if (PlayerWidget)
    {
        <PlayerInfoWidget PlayerWidget="PlayerWidget"
                          PlayerData="SignalRService.Data?.Players"
                          CurrentPlayer="GetLocalPlayer()" />
    }

@code {
    private const string HTTPS_ERROR = "HTTPS is not supported! Change to http:// in the address bar.";
    private string windowTitle = Utils.GetRandomTitle();
    private string host = "localhost";
    private string port = "5000";
    private string password = "password";
    private string name = "localPlayer";
    private bool isHttps = false;
    private bool isConnecting = false;
    private bool showAlert = false;
    private string alertMessage = null;
    private bool isDragging = false;
    private float lastMouseX, lastMouseY;
    private float panOffsetX = 0f, panOffsetY = 0f;
    public bool PlayerWidget { get; set; }
    public bool LootWidget { get; set; }
    public bool MiscWidget { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Load saved widget states
        PlayerWidget = await LoadSetting("PlayerWidget", true);
        LootWidget = await LoadSetting("LootWidget", true);
        MiscWidget = await LoadSetting("MiscWidget", true);
        await LootFilter.LoadSettingsAsync();
    }

    private async Task SavePlayerWidgetSetting(ChangeEventArgs e)
    {
        PlayerWidget = (bool)e.Value;
        await SaveSetting("PlayerWidget", PlayerWidget);
    }

    private async Task SaveLootWidgetSetting(ChangeEventArgs e)
    {
        LootWidget = (bool)e.Value;
        await SaveSetting("LootWidget", LootWidget);
    }

    private async Task SaveMiscWidgetSetting(ChangeEventArgs e)
    {
        MiscWidget = (bool)e.Value;
        await SaveSetting("MiscWidget", MiscWidget);
    }

    private async Task SaveSetting(string key, object value)
    {
        await JS.InvokeVoidAsync("saveSetting", key, value);
    }

    private async Task<bool> LoadSetting(string key, bool defaultValue)
    {
        var result = await JS.InvokeAsync<bool?>("loadSetting", key);
        return result ?? defaultValue;
    }

    private void playerSelected(ChangeEventArgs args)
    {
        name = args.Value.ToString();
    }

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        isHttps = uri.Scheme.Equals("https", StringComparison.OrdinalIgnoreCase);
        if (isHttps)
            ShowAlert(HTTPS_ERROR);

        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (query["host"] != null) host = query["host"];
        if (query["port"] != null) port = query["port"];
        if (query["password"] != null) password = query["password"];
    }

    private WebRadarPlayer GetLocalPlayer()
    {
        return SignalRService.Data?.Players?
            .FirstOrDefault(p => p.Name?.Equals(name, StringComparison.OrdinalIgnoreCase) ?? false);
    }

    private async Task Connect()
    {
        isConnecting = true;
        StateHasChanged();
        try
        {
            if (isHttps)
                throw new Exception(HTTPS_ERROR);
            await SignalRService.StartConnectionAsync(host, port, password);
            CloseAlert();
        }
        catch (Exception ex)
        {
            ShowAlert($"Unhandled Error: {ex.Message}");
        }
        finally
        {
            isConnecting = false;
            StateHasChanged();
        }
    }

    private void ShowAlert(string message)
    {
        alertMessage = message;
        showAlert = true;
        StateHasChanged();
    }

    private void CloseAlert()
    {
        showAlert = false;
        alertMessage = null;
        StateHasChanged();
    }

    private void OnPaintSurface(SKPaintSurfaceEventArgs args)
    {
        var filteredLoot = SignalRService.Data?.Loot?.Where(loot => LootFilter.MatchesFilter(loot))
                              ?? Enumerable.Empty<WebRadarLoot>();

        RadarService.Render(args, name, panOffsetX, panOffsetY, filteredLoot, LootFilter);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await SignalRService.StopConnectionAsync();
        }
        catch { }
    }

    private void OnMouseWheel(WheelEventArgs e)
    {
        float zoomDelta = e.DeltaY > 0 ? -0.05f : 0.05f;
        RadarService.Zoom = Math.Clamp(RadarService.Zoom + zoomDelta, 0.5f, 2.0f);
        StateHasChanged();
    }

    private void OnMouseDown(MouseEventArgs e)
    {
        isDragging = true;
        lastMouseX = (float)e.ClientX;
        lastMouseY = (float)e.ClientY;
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        if (!isDragging) return;

        float deltaX = (float)e.ClientX - lastMouseX;
        float deltaY = (float)e.ClientY - lastMouseY;

        panOffsetX += deltaX;
        panOffsetY += deltaY;

        lastMouseX = (float)e.ClientX;
        lastMouseY = (float)e.ClientY;
        StateHasChanged();
    }

    private void OnMouseUp(MouseEventArgs e)
    {
        isDragging = false;
    }

}